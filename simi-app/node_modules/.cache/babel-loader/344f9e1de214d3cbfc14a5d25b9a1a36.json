{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Development/SIMI/simi-app/src/pages/Tables/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { PageTitle, SectionTitle, CTA } from '../../components';\nimport { Table, TableHeader, TableCell, TableBody, TableRow, TableFooter, TableContainer, Badge, Avatar, Button, Pagination } from '@windmill/react-ui';\nimport { EditIcon, TrashIcon } from '../../assets/icons';\nimport res from '../../utils/demo/tableData'; // make a copy of the data, for the second table\n// const response2 = response.concat([])\n\nfunction Tables() {\n  /**\n   * DISCLAIMER: This code could be badly improved, but for the sake of the example\n   * and readability, all the logic for both table are here.\n   * You would be better served by dividing each table in its own\n   * component, like Table(?) and TableWithActions(?) hiding the\n   * presentation details away from the page view.\n   */\n  const [response, setResponse] = useState([]); // setup pages control for every table\n\n  const [pageTable1, setPageTable1] = useState(1); // const [pageTable2, setPageTable2] = useState(1)\n  // setup data for every table\n\n  const [dataTable1, setDataTable1] = useState([]); // const [dataTable2, setDataTable2] = useState([])\n  // pagination setup\n\n  const resultsPerPage = 10;\n  const totalResults = 100; // pagination change control\n\n  function onPageChangeTable1(p) {\n    setPageTable1(p);\n  } // pagination change control\n  // function onPageChangeTable2(p) {\n  //   setPageTable2(p)\n  // }\n\n\n  useEffect(() => {\n    setResponse(res);\n  }, []); // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  useEffect(() => {\n    setDataTable1(response.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage));\n  }, [response, pageTable1, resultsPerPage]); // on page change, load new sliced data\n  // here you would make another server request for new data\n  // useEffect(() => {\n  //   setDataTable2(response2.slice((pageTable2 - 1) * resultsPerPage, pageTable2 * resultsPerPage))\n  // }, [pageTable2])\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Tables\"), /*#__PURE__*/React.createElement(CTA, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Simple table\"), /*#__PURE__*/React.createElement(TableContainer, {\n    className: \"mb-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, \"Client\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Date\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, dataTable1.map((user, i) => /*#__PURE__*/React.createElement(TableRow, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: \"hidden mr-3 md:block\",\n    src: user.avatar,\n    alt: \"User avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"font-semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 23\n    }\n  }, user.name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-xs text-gray-600 dark:text-gray-400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 23\n    }\n  }, user.job)))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, \"$ \", user.amount)), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    type: user.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }, user.status)), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  }, new Date(user.date).toLocaleDateString())))))), /*#__PURE__*/React.createElement(TableFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    totalResults: totalResults,\n    resultsPerPage: resultsPerPage,\n    onChange: onPageChangeTable1,\n    label: \"Table navigation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Tables;","map":{"version":3,"names":["React","useState","useEffect","PageTitle","SectionTitle","CTA","Table","TableHeader","TableCell","TableBody","TableRow","TableFooter","TableContainer","Badge","Avatar","Button","Pagination","EditIcon","TrashIcon","res","Tables","response","setResponse","pageTable1","setPageTable1","dataTable1","setDataTable1","resultsPerPage","totalResults","onPageChangeTable1","p","slice","map","user","i","avatar","name","job","amount","status","Date","date","toLocaleDateString"],"sources":["/Users/macbook/Development/SIMI/simi-app/src/pages/Tables/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { PageTitle, SectionTitle, CTA } from '../../components'\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableFooter,\n  TableContainer,\n  Badge,\n  Avatar,\n  Button,\n  Pagination,\n} from '@windmill/react-ui'\nimport { EditIcon, TrashIcon } from '../../assets/icons'\n\nimport res from '../../utils/demo/tableData'\n// make a copy of the data, for the second table\n// const response2 = response.concat([])\n\nfunction Tables() {\n  /**\n   * DISCLAIMER: This code could be badly improved, but for the sake of the example\n   * and readability, all the logic for both table are here.\n   * You would be better served by dividing each table in its own\n   * component, like Table(?) and TableWithActions(?) hiding the\n   * presentation details away from the page view.\n   */\n\n  const [response, setResponse] = useState([])\n  // setup pages control for every table\n  const [pageTable1, setPageTable1] = useState(1)\n  // const [pageTable2, setPageTable2] = useState(1)\n\n  // setup data for every table\n  const [dataTable1, setDataTable1] = useState([])\n  // const [dataTable2, setDataTable2] = useState([])\n\n  // pagination setup\n  const resultsPerPage = 10\n  const totalResults = 100\n\n  // pagination change control\n  function onPageChangeTable1(p) {\n    setPageTable1(p)\n  }\n\n  // pagination change control\n  // function onPageChangeTable2(p) {\n  //   setPageTable2(p)\n  // }\n\n  useEffect(() => {\n    setResponse(res)\n  }, [])\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setDataTable1(response.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage))\n  }, [response, pageTable1, resultsPerPage, ])\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  // useEffect(() => {\n  //   setDataTable2(response2.slice((pageTable2 - 1) * resultsPerPage, pageTable2 * resultsPerPage))\n  // }, [pageTable2])\n\n  return (\n    <>\n      <PageTitle>Tables</PageTitle>\n\n      <CTA />\n\n      <SectionTitle>Simple table</SectionTitle>\n      <TableContainer className=\"mb-8\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Client</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {dataTable1.map((user, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <Avatar className=\"hidden mr-3 md:block\" src={user.avatar} alt=\"User avatar\" />\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">{user.job}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">$ {user.amount}</span>\n                </TableCell>\n                <TableCell>\n                  <Badge type={user.status}>{user.status}</Badge>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">{new Date(user.date).toLocaleDateString()}</span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            onChange={onPageChangeTable1}\n            label=\"Table navigation\"\n          />\n        </TableFooter>\n      </TableContainer>\n\n      {/* <SectionTitle>Table with actions</SectionTitle>\n      <TableContainer className=\"mb-8\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Client</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Actions</TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {dataTable2.map((user, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <Avatar className=\"hidden mr-3 md:block\" src={user.avatar} alt=\"User avatar\" />\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">{user.job}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">$ {user.amount}</span>\n                </TableCell>\n                <TableCell>\n                  <Badge type={user.status}>{user.status}</Badge>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">{new Date(user.date).toLocaleDateString()}</span>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-4\">\n                    <Button layout=\"link\" size=\"icon\" aria-label=\"Edit\">\n                      <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    </Button>\n                    <Button layout=\"link\" size=\"icon\" aria-label=\"Delete\">\n                      <TrashIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            onChange={onPageChangeTable2}\n            label=\"Table navigation\"\n          />\n        </TableFooter>\n      </TableContainer> */}\n    </>\n  )\n}\n\nexport default Tables\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}